#KNOWN ISSUES:
#empty yay

#TO DO (big things):
#Saving english, greek, code when user changes number of slides?
#present mode-> css and making it look nice


#PACKAGES:
library(shiny)
library(beepr)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinyAce)

#SOURCES:
source("EuclidToolkit.R")
source("SphericalToolkit.R")

#GLOBAL VARIABLES:
numSlides <- 5
maxSlides <- 10

#FUNCTIONS:
#Length
#Takes in 2 points and finds length between them
Length<-function(A,B){
  return( ((A[1]-B[1])^2+(A[2]-B[2])^2)^0.5 )
}

#StringVecInit
#Initializes an empty string vetor of length N
StringVecInit <- function(N){
  vec = vector(,N);
  vec[1:N]=""
  return(vec)
}

#RunCode
#Takes a String (which is code) and runs it
RunCode <- function(code){
  toRun=parse(text=code)
  eval(toRun)
}

#Previewer
#Previews code for a plot
#Takes as input: slide object and code history 
Previewer<-function(slides, user_code){  
  slidenumber=strtoi(strsplit(slides,"#")[[1]][2])
  return(renderPlot({
      RunCode(user_code$lines[1:slidenumber])
  }))  
}

#Plotter
#Plots code for a plot
#Takes as input: slide number and code history 
Plotter<-function(slidenumber, user_code){  
  return(renderPlot({
    RunCode(user_code$lines[1:slidenumber])
  }))  
}


#PreviewerBack
#Reverts a Preview, running all code up to current slide
#Takes as input: slide object and code history
PreviewerBack<-function(slides, user_code){
  slidenumber=strtoi(strsplit(slides,"#")[[1]][2])
  if(slidenumber>1){
    return(renderPlot({
      RunCode(user_code$lines[1:slidenumber-1])
    }))  
  }
  else{
    return(renderPlot({
      blank.euclid.plot(3, TRUE)
    }))  
  }
}


# Define UI for application that draws a histogram
header <- dashboardHeader(title = "Greek Propositions")

sidebar <- dashboardSidebar(  
  tags$div(
    id = "SP_Edit",
    condition = "input.Present%2==0",
    textInput("title", "Make Title", placeholder = "Untitled"),
    actionButton("titleButton", "Make Title"),
    sliderInput("numSlides", "Number of slides", min=1, max=10, value=5, ticks=FALSE),
    actionButton("addSlidesButton", "Add Slide +"),
    checkboxInput("SecondPlot", label = "Second Plot?", value = F),
  ),  
  shinyjs::hidden(
    tags$div(
      id="SP_Pres",
      tags$div(id="editing_div",
               actionButton("Edit","Edit mode")
      ),  
    )
  )
)

body <- dashboardBody(
  
  #HTML, JS, CSS General Linking
  tags$head(
    tags$link(rel = "stylesheet", type = "text/css", href = "https://cdn.quilljs.com/1.3.6/quill.snow.css"),
    tags$link(rel = "stylesheet", type = "text/css", href = "stuff.css"),
    tags$script(src="https://cdn.quilljs.com/1.3.6/quill.js"),
    tags$script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.js")
  ),
  
  # Application title
  titlePanel(uiOutput("proposition")),
  
  tags$div(
    id="MP_Edit",
  
    tags$div(id="presenting_div",
      actionButton("Present","Presentation Mode!")
    ),  
    
    #Slide selection input
    selectInput("slides", label = h3("Slides"), 
                choices = "", 
                selected = 1),
    
    #HTML editor for greek text 
    h3("Insert Greek text here:"),
  
    includeHTML("www/stuff.html"),
    
    #HTML editor for english translation
    #TO DO: (when presenting need an extra button to show translation or hide)
    h3("Insert English Translation here:"),
    includeHTML("www/stuff2.html"),
    
    h3("Insert Code for this slide's plot here:"),
    includeHTML("www/ace.html"),
    
    tags$ul(
      class="horul",
      tags$li(class="horli", actionButton("Preview", "Preview Plot")),
      tags$li(class="horli", id="horliright", actionButton("GoBack", "Undo")),
      tags$li(class="horli", id="horliright", actionButton("SaveSlide", "Save Slide"))
    ),  
    
    
    # Show plot and text
    #verbatimTextOutput("message"),
    htmlOutput("message"),
    verbatimTextOutput("greek"),
    tags$br(),
    
    plotOutput("pplot"),
    
    
    conditionalPanel(
      condition = "input.SecondPlot == 1",
      h3("Insert Code for this slide's other plot here:"),
      includeHTML("www/ace2.html"),
      
      tags$ul(
        class="horul",
        tags$li(class="horli", actionButton("Preview2", "Preview Plot")),
        tags$li(class="horli", id="horliright", actionButton("GoBack2", "Go Back"))
      ),  
      
      tags$br(),
      
      plotOutput("pplot2"),
      
    ),
  ),
  
  
  shinyjs::hidden(
    tags$div(
      id="MP_Pres",
      
      tags$div(
        id="greek_text",
        htmlOutput("GreekText")
      ),
      
      tags$br(),
      
      tags$div(
        id="plot1",
        plotOutput("ppplot"),
      ),
      
      tags$br(),
      
      conditionalPanel(
        condition = "input.SecondPlot == 1",
        tags$div(
          id="plot2",
          plotOutput("ppplot2"),
        )
      ),
      
      tags$br(),
      
      tags$div(
        id="ShowTransContainer",
        actionButton("ShowTrans", "Show English Translation")
      ),
      
      tags$br(),
      
      shinyjs::hidden(
        tags$div(
          id="english_translation",
          actionButton("HideTrans", "Hide"),
          tags$br(),
          htmlOutput("EnglishText")
        )
      ),
      
      tags$br(),
      uiOutput("presentationSlideCounter"),
      tags$ul(
        class="horul",
        tags$li(class="horli", actionButton("PreviousP", "←")),
        tags$li(class="horli", id="horliright", actionButton("NextP", "→"))
      ),  
    )
  ),
  
  
  tags$div(
    id="console",
    
    tags$br(),
    
    #Console should be removed/hidden on final version
    useShinyjs(),
    # h3("R Console:"),
    # tags$div(
    #   class="codewrapper",
    #   runcodeUI(code = "", type="textarea")
    # ),
    # tags$br(),
  )
  
  
  
  
  
)

ui <- dashboardPage(header, sidebar, body)

code <- "Enter Code Here"

# Define server logic required to draw a histogram
server <- function(session, input, output) {
  
  greek_lines=reactiveValues()
  english_lines=reactiveValues()
  user_code=reactiveValues()
  user_code2=reactiveValues()
  
  #DEFAULT SLIDE SETTINGS
  
  output$pplot <- renderPlot(blank.euclid.plot(3, TRUE))
  
  output$pplot2 <- renderPlot(blank.euclid.plot(3, TRUE))
  
  output$proposition <- renderUI("Untitled")
  
  greek_lines$lines=StringVecInit(maxSlides)
  english_lines$lines=StringVecInit(maxSlides)
  user_code$lines=StringVecInit(maxSlides)
  user_code2$lines=StringVecInit(maxSlides)
  
  updateSelectInput(session, "slides", label = "Slides", choices = paste0("Slide #",1:numSlides))
  
  runcodeServer();
  
  #Presentation code:
  
  #Tracks which slide user is on
  Pres_track=reactiveValues()
  Pres_track$slide=1

  # #Initiate Presenting mode
  observeEvent(input$Present,{
    shinyjs::hide("SP_Edit")
    shinyjs::hide("MP_Edit")
    shinyjs::show("SP_Pres")
    shinyjs::show("MP_Pres")
    Pres_track$slide=1
  })
  
  #Show english translation
  observeEvent(input$ShowTrans,{
    shinyjs::show("english_translation")
    shinyjs::hide("ShowTransContainer")
  })
  
  #Hide english translation
  observeEvent(input$HideTrans,{
    shinyjs::hide("english_translation")
    shinyjs::show("ShowTransContainer")
  })
  
  #Initiate Editing mode
  observeEvent(input$Edit,{
    shinyjs::show("SP_Edit")
    shinyjs::show("MP_Edit")
    shinyjs::hide("SP_Pres")
    shinyjs::hide("MP_Pres")
  })
  
  #Display Text
  output$GreekText <- renderUI({
    HTML(greek_lines$lines[Pres_track$slide])
  })
  
  output$EnglishText <- renderUI({
    HTML(english_lines$lines[Pres_track$slide])
  })
  
  #Do the plots at start
  output$ppplot<-Plotter(Pres_track$slide, user_code)
  output$ppplot2<-Plotter(Pres_track$slide, user_code2)
  
  #Move a slide 
  observeEvent(input$NextP,{
    if(Pres_track$slide < numSlides) {
      Pres_track$slide=(Pres_track$slide+1)%%(length(greek_lines$lines)+1) + 1*((Pres_track$slide+1)%%(length(greek_lines$lines)+1)==0)
      output$ppplot<-Plotter(Pres_track$slide, user_code)
      output$ppplot2<-Plotter(Pres_track$slide, user_code2)
      output$presentationSlideCounter <- renderUI(paste("Slide", Pres_track$slide, "out of", numSlides))
      #print(Pres_track$slide)
    }
  })
  
  observeEvent(input$PreviousP,{
    if(Pres_track$slide > 1) {
      Pres_track$slide=(Pres_track$slide-1)%%(length(greek_lines$lines)+1) + length(greek_lines$lines)*((Pres_track$slide-1)%%(length(greek_lines$lines)+1)==0)
      output$ppplot<-Plotter(Pres_track$slide, user_code)
      output$ppplot2<-Plotter(Pres_track$slide, user_code2)
      output$presentationSlideCounter <- renderUI(paste("Slide", Pres_track$slide, "out of", numSlides))
      #print(Pres_track$slide)
    }
  })
  
  #Rest of the code
  
  tracke=reactiveValues()
  tracke$count=-1
  
  # 
  # j=eventReactive(input$Next, {
  #   tracke$count=tracke$count+1
  #   
  #   tracker=tracke$count
  #   English=c("",
  #             "Let BAC be the given rectilinear angle", 
  #             "Let the Point D have been taken somewhere on AB (lets just say 3 across the line BA)",
  #             "And let AE equal to AD have been cut off from AC (so length 2) F is a point under A",
  #             "And let DE have been joined",
  #             "And let the equilateral triangle DEF have been constructed upon DE",
  #             "And Let AF to have been joined.",
  #             "I say that the angle BAC has been cut in half by the straight line AF"
  #   )
  #   return(English[tracker%%8+1*(tracker%%8==0)])
  # })
  
  #Make title
  observeEvent(input$titleButton, {
    output$proposition <- renderUI(input$title)
  })
  
  #Adding Slides
  observeEvent(input$addSlidesButton, {
    if(numSlides < 10) {
      numSlides <<- numSlides + 1
    }
    output$pplot <- renderPlot(blank.euclid.plot(3, TRUE))
    updateSelectInput(session, "slides", label = "Slides", choices = paste0("Slide #",1:numSlides))
    updateSliderInput(session, "numSlides", value = numSlides)
    #print(input$typeCode)
    #output$pplot <- renderPlot(blank.euclid.plot(3, TRUE))
    # greek_lines$lines=StringVecInit(input$numSlides)
    # english_lines$lines=StringVecInit(input$numSlides)
    # user_code$lines=StringVecInit(input$numSlides)
    # user_code2$lines=StringVecInit(input$numSlides)
  })
  
  #Slider
  observeEvent(input$numSlides, {
    numSlides <<- input$numSlides
    output$pplot <- renderPlot(blank.euclid.plot(3, TRUE))
    updateSelectInput(session, "slides", label = "Slides", choices = paste0("Slide #",1:numSlides))
    #print(input$typeCode)
    #output$pplot <- renderPlot(blank.euclid.plot(3, TRUE))
    # greek_lines$lines=StringVecInit(input$numSlides)
    # english_lines$lines=StringVecInit(input$numSlides)
    # user_code$lines=StringVecInit(input$numSlides)
    # user_code2$lines=StringVecInit(input$numSlides)
  })
  
  #Changing which slide number user is on
  #sends message to js code which changes js editors
  observeEvent(input$slides,{
    
    #update plots
    if(!is.na(strtoi(strsplit(input$slides,"#")[[1]][2]))){
      #print("check")
      output$pplot<-PreviewerBack(input$slides, user_code)
      output$pplot2<-PreviewerBack(input$slides, user_code2)
    }
    
    slidenumber=strtoi(strsplit(input$slides,"#")[[1]][2])
    #print(slidenumber)
    session$sendCustomMessage("greek_lines_stuff", greek_lines$lines[slidenumber])
    session$sendCustomMessage("english_lines_stuff", english_lines$lines[slidenumber])
    session$sendCustomMessage("user_code_stuff", user_code$lines[slidenumber])
    session$sendCustomMessage("user_code_stuff2", user_code2$lines[slidenumber])
  })
  
  #Saving a slide
  #Saves the Greek, English and Code input
  observeEvent(input$SaveSlide, {
    #print("Saving slide")
    slidenumber=strtoi(strsplit(input$slides,"#")[[1]][2])
    #Need to avoid a replacement length = 0 error
    if(length(input$mydata)>0){
      greek_lines$lines[slidenumber]=input$mydata 
    }
    if(length(input$englishtrans)>0){
      english_lines$lines[slidenumber]=input$englishtrans
    }
    if(length(input$user_code)>0){
      user_code$lines[slidenumber]=input$user_code
    }  
    if(length(input$user_code)>0){
      user_code2$lines[slidenumber]=input$user_code2
    }  
  })
  
  #PLOT 1
  
  #Previewing code
  observeEvent(input$Preview, {
    
    if(length(input$user_code)>0){
      user_code$lines[strtoi(strsplit(input$slides,"#")[[1]][2])]=input$user_code
    }  
    output$pplot<-Previewer(input$slides, user_code)
  })
  
  #Going back from preview
  observeEvent(input$GoBack, {
    output$pplot<-PreviewerBack(input$slides, user_code)
  })
  
  #PLOT 2
  
  #Previewing code
  observeEvent(input$Preview2, {
    
    if(length(input$user_code2)>0){
      user_code2$lines[strtoi(strsplit(input$slides,"#")[[1]][2])]=input$user_code2
    }  
    output$pplot2<-Previewer(input$slides, user_code2)
  })
  
  #Going back from preview
  observeEvent(input$GoBack2, {
    output$pplot2<-PreviewerBack(input$slides, user_code2)
  })
  
  # 
  # 
  # output$message<-renderText({
  #   if(input$Next == 0){
  #     return("")
  #   }
  #   j()
  # })
  # 
  # output$pplot<-renderPlot({
  #   tracker=tracke$count%%8
  #   if(tracker>=0){
  #     blank.euclid.plot(3, TRUE)
  #   }
  #   
  #   if(tracker>=1){
  # B <- c(-3,-2)
  # C <- c(3,-2)
  # A <- c(0,2)
  # draw.euclid.line(A,B)
  # draw.euclid.line(A,C)
  #     
  #     label.euclid.points(cbind(A,B,C), c("A", "B","C"), c(12,6,6),greek= TRUE)
  #   }
  #   if(tracker>=2){
  #     GBA<-acos(3/5)
  #     
  #     D=c(3/5*3+B[1], sin(GBA)*3+B[2])
  #     label.euclid.point(D,"D",9,greek=T)
  #   }
  #   if(tracker>=3){
  #     GAF<-pi/2-GBA
  #     
  #     E=c(sin(GAF)*2+A[1],A[2]-cos(GAF)*2)
  #     label.euclid.point(E,"E",3,greek=T)
  #   }
  #   if(tracker>=4){
  #     draw.euclid.line(D,E)
  #   }
  #   if(tracker>=5){
  #     DE=Length(D,E)
  #     F_=c(DE*cos(pi/3)+D[1],D[2]-DE*sin(pi/3))
  #     
  #     draw.euclid.line(D,F_)
  #     draw.euclid.line(F_,E)
  #     label.euclid.point(F_,"F",6,greek=T)
  #   }
  #   if(tracker>=6){
  #     draw.euclid.line(F_,A)
  #   }
  # })
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)

